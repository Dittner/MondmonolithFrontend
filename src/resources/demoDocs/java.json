{
  "uid": "java",
  "title": "Java",
  "directory": "Backend",
  "pages": [
    {
      "uid": "18877eb8dd8-8cf02f24-1e",
      "title": "File",
      "blocks": [
        {
          "uid": "18877eb8dd8-8cf02f24-1f",
          "text": "В любой Unix-системе имеется файл `/usr/share/dict/words`, содержащий весь словарь\nВебстера (2-е из- дание), по одному слову на строку. Для чтения этого файла можно воспользоваться методом Files.lines, который порождает поток строк, содержащих слова.\n\nЧтение файла словаря в отображение:\n"
        },
        {
          "uid": "18877eb8dd8-8cf02f24-20",
          "text": "~~~java\nSystem.out.println(\"Распределение числа слов по длинам:\");\ntry (Stream<String> lines = Files.lines(dictionary)) {\n    lines.filter(s -> s.length() > 20)\n         .collect(Collectors.groupingBy(String::length, Collectors.counting()))\n         .forEach((len, num) -> System.out.printf(\"%d: %d%n\", len, num));\n} catch (IOException e) { \n    e.printStackTrace();\n}\n//21: 82\n//22: 41\n//23: 17\n//24: 5\n~~~"
        }
      ]
    },
    {
      "uid": "18877eb8dd8-8cf02f24-1a",
      "title": "Map<,>",
      "blocks": [
        {
          "uid": "18877eb8dd8-8cf02f24-1b",
          "text": "## Interface Map\nДанный интерфейс также находится в составе JDK c версии 1.2 и предоставляет разработчику базовые методы для работы с данными вида «ключ — значение». Также как и `Collection`, он был дополнен дженериками в версии Java 1.5 и в версии Java 8 появились дополнительные методы для работы с лямбдами\n\n\n`V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)`\n  \nТребуется вычислить счетчики вхождения всех слов в данный текст. Если слово уже есть в отображении, обновить его счетчик, иначе поместить слово в отображение со счетчиком 1:\n"
        },
        {
          "uid": "18877eb8dd8-8cf02f24-1c",
          "text": "~~~java\npublic Map<String, Integer> fullWordCounts(String passage) { \n    Map<String, Integer> wordCounts = new HashMap<>();\n    //Не учитываем регистра букв и знаков препинания:\n    String testString = passage.toLowerCase().replaceAll(\"\\W\",\" \");\n    Arrays.stream(testString.split(\"\\s+\")).forEach(word ->\n        wordCounts.merge(word, 1, Integer::sum));\n    return wordCounts;\n}\n~~~"
        },
        {
          "uid": "18877eb8dd8-8cf02f24-1d",
          "text": "Метод merge принимает ключ и значение по умолчанию, которое будет вставлено, если ключа еще нет в отображении. Если же ключ есть, то merge применяет бинарный оператор (в данном случае метод `sum` класса `Integer`) для вычисления нового значения на основе старого."
        }
      ]
    }
  ]
}