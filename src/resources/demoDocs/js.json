{
  "uid": "js",
  "title": "JavaScript",
  "directory": "Frontend",
  "pages": [
    {
      "uid": "1887cf6af4b-84821ab5-24",
      "title": "Closure",
      "blocks": [
        {
          "uid": "1887cf6af4b-84821ab5-25",
          "text": "## Замыкания"
        },
        {
          "uid": "1887cf6af4b-84821ab5-26",
          "text": "~~~js\n  const tahoe = {\n  mountains: [\"Freel\", \"Rose\", \"Tallac\", \"Rubicon\", \"Silver\"],\n  print: function(delay = 1000) {\n    setTimeout(() => { \n        // this в стрелочной функции ссылается\n        // на глобальный контекст (window)\n        console.log(this.mountains.join(\", \"));\n    }, delay); }\n};\ntahoe.print();\n//Output: Freel, Rose, Tallac, Rubicon, Silver\n~~~"
        }
      ]
    },
    {
      "uid": "1887cf6af4b-84821ab5-21",
      "title": "Promise",
      "blocks": [
        {
          "uid": "1887cf6af4b-84821ab5-22",
          "text": "Функция `getPeople` возвращает новый промис, который делает запрос к API. Если промис выполнен успешно, данные загрузятся. Если он не выполнен, возникнет ошибка:\n"
        },
        {
          "uid": "1887cf6af4b-84821ab5-23",
          "text": "~~~js\n  const getPeople = count =>\n  new Promise((resolves, rejects) => {\n  const api = `https://de.mo/?nat=US&results=${count}`;\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", api);\n  request.onload = () =>\n    request.status === 200 \n      ? resolves(JSON.parse(request.response).results)\n      : reject(Error(request.statusText));\n  request.onerror = err => rejects(err);\n  request.send();\n})\n~~~"
        }
      ]
    },
    {
      "uid": "1887cf6af4b-84821ab5-27",
      "title": "Symbol.iterator",
      "blocks": [
        {
          "uid": "1887cf6af4b-84821ab5-28",
          "text": "Array, Map, Set are iterable objects. Все iterable объекты должны иметь функцию `[Symbol.iterator]()`, которая возвращает текущее вычисленное значение внутри объекта, например `{value: 10}`, а по окнчанию цикла указывать на завершение объектом `{done: true}`.\n\nCreate Range class as iterable object:\n"
        },
        {
          "uid": "1887cf6af4b-84821ab5-29",
          "text": "~~~js\n  class Range {\n  constructor(from, to) {\n    this.from = from\n    this.to = to\n  }\n  \n  toString() { return `Range(${this.from}, ${this.to})` }\n  \n  [Symbol.iterator]() {\n    let value = Math.ceil(this.from)\n    const last = this.to;\n    return {\n      next() {\n        return (value < last) ? { value: value++ } : { done: true }\n      }\n    }\n  }\n}\n~~~"
        }
      ]
    }
  ]
}