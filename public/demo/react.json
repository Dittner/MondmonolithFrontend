{"uid":"react","title":"React","directory":"Frontend","pages":[{"uid":"1889cd0ba51-53f31cef-4","title":"React.Memo","blocks":[{"uid":"1889cd0ba51-53f31cef-5","text":"React Memo is a higher-order component that wraps around a component to memoize the rendered output and avoid unnecessary renderings. This improves performance because it memoizes the result and skips rendering to reuse the last rendered result."},{"uid":"1889cd0ba51-53f31cef-6","text":"```jsx\nconst PageView = ({page}) => {\n  //...\n  return (\n    <div className=\"pageContainer\">\n      <MemoizedMarkdown text={page.text}/>\n      <div className=\"pageBg\"/>\n    </div>\n  )\n}\n\nconst MemoizedMarkdown = React.memo(Markdown, (prev, next) => {\n  return prev.text === next.text\n})\n```"}]},{"uid":"1889cd0ba51-53f31cef-a","title":"useCallback","blocks":[{"uid":"1889cd0ba51-53f31cef-b","text":"The React `useCallback` Hook returns a memoized callback function. The `useCallback` and `useMemo` Hooks are similar. The main difference is that `useMemo` returns a memoized value and `useCallback` returns a memoized function.\n\nOne reason to use `useCallback` is to prevent a component from re-rendering unless its props have changed."},{"uid":"1889cd0ba51-53f31cef-c","text":"```jsx\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const [todos, setTodos] = useState([])\n  \n  const increment = () => {\n    setCount((c) => c + 1)\n  }\n  //to prevent recreating of addTodo func should be used useCallback wrapper\n  const addTodo = useCallback(() => {\n    setTodos((t) => [...t, \"New Todo\"])\n  }, [todos])\n  \n  return (\n    <>\n      {/*Todos are not rerendering by changing state because\n      addTodo func remains the same until todo's list are updated*/}\n      <Todos todos={todos} addTodo={addTodo} />\n      <hr />\n      <div>\n        Count: {count}\n        <button onClick={increment}>+</button>\n      </div>\n    </>\n  )\n}\n```"}]},{"uid":"1887cf6af4b-84821ab5-2a","title":"useEffect","blocks":[{"uid":"1887cf6af4b-84821ab5-2b","text":"The `useEffect` Hook allows you to perform side effects in your components."},{"uid":"1887cf6af4b-84821ab5-2c","text":"```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0)\n  \n  useEffect(() => {\n    document.title = `You have clicked ${count} times`\n  })\n  \n  return (\n    <div>\n      <p>You have clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  )\n}\n```"}]},{"uid":"1889cd0ba51-53f31cef-7","title":"useMemo","blocks":[{"uid":"1889cd0ba51-53f31cef-8","text":"`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders."},{"uid":"1889cd0ba51-53f31cef-9","text":"```jsx\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n  const visibleTodos = useMemo( () => filterTodos(todos, tab), [todos, tab] )\n  // ...\n}\n```"}]},{"uid":"1889d25452b-983218ca-5","title":"useRef","blocks":[{"uid":"1889d25452b-983218ca-6","text":"The `useRef` Hook allows you to access a DOM element directly. It can be used to store a mutable value that does not cause a re-render when updated."},{"uid":"1889d25452b-983218ca-7","text":"```tsx\nimport { useState, useEffect, useRef } from \"react\";\n\nexport const TextArea = stylable(({text, onApply, onCancel, autoFocus}: TextAreaProps) => {\n  const [value, setValue] = useState(text);\n  const [width, height] = useWindowSize();\n\n  const ta = useRef<HTMLTextAreaElement>(null);\n\n  const adjustScroller = () => {\n    if (ta && ta.current) {\n      ta.current.style.height = `${ta.current.scrollHeight + 5}px`;\n    }\n  }\n\n  const onChange = (event: any) => {\n    setValue(event.target.value)\n    adjustScroller()\n  }\n\n  useEffect(() => {\n    adjustScroller()\n  },[width, height])\n\n  const onKeyDown = (e: any) => {\n    //Enter key\n    if (e.keyCode === 13 && !e.shiftKey) {\n      e.preventDefault()\n      e.stopPropagation()\n      onApply(value)\n    }\n    //ESC key\n    if (e.keyCode === 27) {\n      e.preventDefault()\n      e.stopPropagation()\n      onCancel()\n    }\n  }\n\n  return <textarea value={value}\n                   ref={ta}\n                   rows={value.split(/\\r\\n|\\r|\\n/).length}\n                   spellCheck=\"false\"\n                   onChange={onChange}\n                   onKeyDown={onKeyDown}\n                   autoFocus={autoFocus}/>\n})\n```"}]}]}